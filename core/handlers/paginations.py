from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery



class Pagination:
    def __init__(self, items, page_size=10):
        self.items = items
        self.page_size = page_size
        self.total_pages = max(1, len(items) // page_size + (1 if len(items) % page_size else 0))
        self.current_page = 1

    def get_current_page_items(self):
        start = (self.current_page - 1) * self.page_size
        end = start + self.page_size
        return self.items[start:end]


    # def update_kb(self, detail_word=False):
    #     buttons = []
        
    #     #–ï—Å–ª–∏ —Ö–µ–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç –¥–ª—è —Å–ª–æ–≤–∞—Ä—è:page –ï—Å–ª–∏ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞: details_page
    #     page_type = "page" if detail_word else "details_page" 

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    #     if self.current_page > 1:
    #         buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{page_type}_{self.current_page - 1}"))

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    #     buttons.append(InlineKeyboardButton(text=f"{self.current_page}/{self.total_pages}", callback_data="current_page"))

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    #     if self.current_page < self.total_pages:
    #         buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{page_type}_{self.current_page + 1}"))

    #     keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    #     return keyboard
    
    # def update_kb(self, detail_word=None):
    #     buttons = []
    #     base_callback_data = "details_page" if detail_word else "page"

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    #     if self.current_page > 1:
    #         callback_data = f"{base_callback_data}_{self.current_page - 1}"
    #         if detail_word:
    #             callback_data += f"_{detail_word}"
    #         buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data))

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    #     buttons.append(InlineKeyboardButton(text=f"{self.current_page}/{self.total_pages}", callback_data="noop"))

    #     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    #     if self.current_page < self.total_pages:
    #         callback_data = f"{base_callback_data}_{self.current_page + 1}"
    #         if detail_word:
    #             callback_data += f"_{detail_word}"
    #         buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=callback_data))

    #     keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    #     return keyboard

    # –î–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫(—Å–ª–æ–≤–∞—Ä—å)
    def update_kb_general(self):
        buttons = []
        base_callback_data = "page"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if self.current_page > 1:
            buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{base_callback_data}_{self.current_page - 1}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        buttons.append(InlineKeyboardButton(text=f"{self.current_page}/{self.total_pages}", callback_data="noop"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if self.current_page < self.total_pages:
            buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{base_callback_data}_{self.current_page + 1}"))

        return InlineKeyboardMarkup(inline_keyboard=[buttons])

    # –î–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    def update_kb_detail(self, detail_word, card_id=None):
        buttons = []
        base_callback_data = "details_page"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if self.current_page > 1:
            buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{base_callback_data}_{self.current_page - 1}_{detail_word}"))

        buttons.append(InlineKeyboardButton(text=f"{self.current_page}/{self.total_pages}", callback_data="noop"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
        if self.current_page < self.total_pages:
            buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"{base_callback_data}_{self.current_page + 1}_{detail_word}"))

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω card_id, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –£–¥–∞–ª–∏—Ç—å
        if card_id is not None:
            buttons.append(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_card_{card_id}"))
            buttons.append(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_card_{card_id}"))

        return InlineKeyboardMarkup(inline_keyboard=[buttons])



    def next_page(self):
        if self.current_page < self.total_pages:
            self.current_page += 1

    def prev_page(self):
        if self.current_page > 1:
            self.current_page -= 1