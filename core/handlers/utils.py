async def update_card_creation_message(bot_message_id, instruction_message_id, state, message, **kwargs):
    card_info = await state.get_data()
    card_info.update(kwargs)
    
    await message.bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=bot_message_id,
        text=(
            '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!üìù\n'
            '<i>–ï—Å–ª–∏ —É –≤–∞—Å –∏–º–µ—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏</i>\n\n'
            f'–°–ª–æ–≤–æ: {card_info.get("card_foreign_word", "üö´")}' + (" ‚úÖ" if card_info.get("card_foreign_word") is not None else "") + '\n'
            f'–ü–µ—Ä–µ–≤–æ–¥: {card_info.get("card_translation", "üö´")}' + (" ‚úÖ" if card_info.get("card_translation") is not None else "") + '\n'
            f'–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {card_info.get("card_transcription", "üö´")}' + (" ‚úÖ" if card_info.get("card_transcription") is not None else "") + '\n'
            f'–ö–æ–Ω—Ç–µ–∫—Å—Ç: {card_info.get("card_example_usage", "üö´")}' + (" ‚úÖ" if card_info.get("card_example_usage") is not None else "")
            )
    )
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    next_step = card_info.get("next_step")
    if next_step:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=instruction_message_id,
            text=next_step
        )
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(**card_info)


def format_word(word):
    return word.lower().capitalize()


async def display_repetition_details(callback_query, session_maker, repetition_id, pagination):
    repetition = await session_maker.get(Repetition, repetition_id)

    details = f"–°–ª–æ–≤–æ: {repetition.card.foreign_word}\n–£—Ä–æ–≤–µ–Ω—å: {LEVEL_TO_COLOR[repetition.level]}({repetition.level})\n–°–ª–µ–¥—É—é—â–∏–π –ø–æ–≤—Ç–æ—Ä: {repetition.next_review_date}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data=f"approve_{repetition_id}"),
         InlineKeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å ‚ùå", callback_data=f"postpone_{repetition_id}")],
        pagination.create_navigation_buttons(f"repetition_nav_{repetition.card_id}")
    ])

    await callback_query.message.edit_text(details, reply_markup=keyboard)
