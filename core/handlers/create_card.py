from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from sqlalchemy.orm import sessionmaker

from core.handlers.utils import update_card_creation_message, format_word
from core.structures.fsm_group import CardStates
from core.keyboards import CANCEL_BOARD,  CANCEL_AND_NEXT_BOARD, MAIN_MENU_BOARD
from core.db import create_card



async def menu_card_create_confirmation(message: types.Message, state: FSMContext):
    await message.answer("–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' ", reply_markup=CANCEL_AND_NEXT_BOARD)
    await state.set_state(CardStates.waiting_for_confirmation)



async def menu_card_create(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_BOARD)
    elif message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        bot_message = await message.answer('–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É!üìù\n<i>–ï—Å–ª–∏ —É –≤–∞—Å –∏–º–µ—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏</i>\n\n–°–ª–æ–≤–æ: üö´\n–ü–µ—Ä–µ–≤–æ–¥: üö´\n–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: üö´\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: üö´')
        await state.update_data(bot_message_id=bot_message.message_id)
        instruction_message = await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:')
        await state.update_data(instruction_message_id=instruction_message.message_id)
        await state.set_state(CardStates.waiting_for_word)


async def menu_card_create_word(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_BOARD)
    user_data = await state.get_data()
    await update_card_creation_message(
        bot_message_id=user_data['bot_message_id'],
        instruction_message_id=user_data['instruction_message_id'],
        state=state,
        message=message,
        card_foreign_word=message.text,
        next_step="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:",
        reply_markup=CANCEL_AND_NEXT_BOARD

    )
    await state.set_state(CardStates.waiting_for_translation)


async def menu_card_create_translate(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    bot_message_id = user_data['bot_message_id']
    instruction_message_id = user_data['instruction_message_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_BOARD)
    elif message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        card_translation = ""
        await message.answer("–ü–æ–ª–µ '–ü–µ—Ä–µ–≤–æ–¥' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.")
        return 

    else:
        card_translation = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_card_creation_message(
        bot_message_id=bot_message_id,
        instruction_message_id=instruction_message_id,
        state=state,
        message=message,
        card_translation=card_translation,
        next_step="–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç):",
        reply_markup=CANCEL_BOARD
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CardStates.waiting_for_transcription)


async def menu_card_create_transcription(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    bot_message_id = user_data['bot_message_id']
    instruction_message_id = user_data['instruction_message_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_BOARD)
    elif message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        card_transcription = ""
    else:
        card_transcription = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_card_creation_message(
        bot_message_id=bot_message_id,
        instruction_message_id=instruction_message_id,
        state=state,
        message=message,
        card_transcription=card_transcription,
        next_step="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç):",
        reply_markup=CANCEL_AND_NEXT_BOARD
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CardStates.waiting_for_example_usage)


async def menu_posts_create_example_usage(message: types.Message, state: FSMContext, session_maker: sessionmaker):
    user_data = await state.get_data()
    bot_message_id = user_data['bot_message_id']
    instruction_message_id = user_data['instruction_message_id']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.clear()
        return await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_MENU_BOARD)
    elif message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        card_example_usage = ""
    else:
        card_example_usage = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await update_card_creation_message(
        bot_message_id=bot_message_id,
        instruction_message_id=instruction_message_id,
        state=state,
        message=message,
        card_example_usage=card_example_usage,
        next_step=None,  # –ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        reply_markup=CANCEL_AND_NEXT_BOARD
    )

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    card_foreign_word = format_word(user_data['card_foreign_word']) if user_data['card_foreign_word'] != "" else None
    card_translation = format_word(user_data['card_translation']) if user_data['card_translation'] != "" else None
    card_transcription = format_word(user_data['card_transcription']) if user_data['card_transcription'] != "" else None
    card_example_usage = format_word(card_example_usage) if card_example_usage != "" else None
    card = await create_card(
        session_maker=session_maker,
        foreign_word=card_foreign_word,
        translation=card_translation,
        transcription=card_transcription,
        example_usage=card_example_usage,
        user_id=message.from_user.id,
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    if card:
        await message.answer("–ö–∞—Ä—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=MAIN_MENU_BOARD)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.", reply_markup=MAIN_MENU_BOARD)

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await message.bot.delete_message(chat_id=message.chat.id, message_id=instruction_message_id)