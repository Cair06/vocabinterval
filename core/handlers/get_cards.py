# –°–æ–∑–¥–∞—ë–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
from aiogram.types import Message, CallbackQuery
from sqlalchemy.orm import sessionmaker

from core.db import get_all_user_cards, get_user_cards_by_word, get_repetitions_by_card_id, LEVEL_TO_PERCENT
from core.handlers.utils import format_word
from core.keyboards import MAIN_MENU_BOARD
from .paginations import Pagination


async def on_start(message: Message, session_maker: sessionmaker):
    user_id = message.from_user.id
    user_cards = await get_all_user_cards(session_maker, user_id)
    pagination = Pagination(user_cards, page_size=10)
    cards_list = "\n".join(f"‚ñ´Ô∏è {card.foreign_word} - <tg-spoiler>{card.translation}</tg-spoiler>"
                           for card in pagination.get_current_page_items())

    await message.answer(f"üìñ –°–ª–æ–≤–∞—Ä—å:\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É"
                         f" /get_card 'word'"
                         f"\n\n{cards_list}",
                         reply_markup=pagination.update_kb_general())


async def on_pagination(callback_query: CallbackQuery, session_maker: sessionmaker):
    page_action, page_number = callback_query.data.split('_')[1], callback_query.data.split('_')[2]
    page_number = int(page_number)

    user_id = callback_query.from_user.id
    user_cards = await get_all_user_cards(session_maker, user_id)
    pagination = Pagination(user_cards, page_size=10)
    pagination.current_page = page_number

    if page_action == "page":
        cards_list = "\n".join(f"‚ñ´Ô∏è {card.foreign_word} - <tg-spoiler>{card.translation}</tg-spoiler>"
                               for card in pagination.get_current_page_items())
        await callback_query.message.edit_text(f"üìñ –°–ª–æ–≤–∞—Ä—å:\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–æ–π "
                                               f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_card 'word'\n\n{cards_list}",
                                               reply_markup=pagination.update_kb_general())
        await callback_query.answer()


async def on_get_card_details(message: Message, session_maker: sessionmaker):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–≤–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    word = format_word(args[1])
    cards = await get_user_cards_by_word(session_maker, user_id, word)

    if cards:
        pagination = Pagination(cards, page_size=1)
        current_page_cards = pagination.get_current_page_items()

        response = f"‚Ññ1 {word}:\n\n" + '\n'.join(
            f"–°–ª–æ–≤–æ: {card.foreign_word}\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {card.translation}\n"
            + (f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {card.transcription}\n" if card.transcription else "")
            + (f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {card.example_usage}\n" if card.example_usage else "")
            + f"–°–æ–∑–¥–∞–Ω–æ: {card.created_at}\n\n"
            for card in current_page_cards
        )

        repetitions_info = await get_repetitions_by_card_id(session_maker, current_page_cards[0].id)
        repetition_details = '\n'.join(
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {LEVEL_TO_PERCENT[repetition.level]}, –°–ª–µ–¥—É—é—â–∏–π –ø–æ–≤—Ç–æ—Ä: {repetition.next_review_date}"
            for repetition in repetitions_info
        )

        response += f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n{repetition_details}"
        await message.answer(response, reply_markup=pagination.update_kb_detail(detail_word=word,
                                                                                card_id=current_page_cards[0].id))
    else:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞(–∏) —Å –¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º.", reply_markup=MAIN_MENU_BOARD)


async def on_card_details_pagination(callback_query: CallbackQuery, session_maker: sessionmaker):
    data_parts = callback_query.data.split('_')
    # –ú—ã –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ data_parts –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 —ç–ª–µ–º–µ–Ω—Ç–∞: ['cards','details', 'Music', 'page', '2',]
    if len(data_parts) < 5 or not data_parts[4].isdigit():
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
        return

    action, word, page_action, page_number = data_parts[1], data_parts[2], data_parts[3], int(data_parts[4]),

    user_id = callback_query.from_user.id
    cards = await get_user_cards_by_word(session_maker, user_id, word)

    if cards:
        pagination = Pagination(cards, page_size=1)
        pagination.current_page = page_number
        current_page_cards = pagination.get_current_page_items()

        response = f"‚Ññ{page_number} {word}:\n\n" + "\n".join(
            f"–°–ª–æ–≤–æ: {card.foreign_word}\n"
            f"–ü–µ—Ä–µ–≤–æ–¥: {card.translation}\n"
            + (f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {card.transcription}\n" if card.transcription else "")
            + (f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {card.example_usage}\n" if card.example_usage else "")
            + f"–°–æ–∑–¥–∞–Ω–æ: {card.created_at}\n\n"
            for card in pagination.get_current_page_items()
        )

        repetitions_info = await get_repetitions_by_card_id(session_maker, current_page_cards[0].id)
        repetition_details = '\n'.join(
            f"–ü—Ä–æ—Ü–µ–Ω—Ç: {LEVEL_TO_PERCENT[repetition.level]}, –°–ª–µ–¥—É—é—â–∏–π –ø–æ–≤—Ç–æ—Ä: {repetition.next_review_date}"
            for repetition in repetitions_info
        )

        response += f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:\n{repetition_details}"

        await callback_query.message.edit_text(response,
                                               reply_markup=pagination.update_kb_detail(detail_word=word,
                                                                                        card_id=current_page_cards[
                                                                                            0].id))
        await callback_query.answer()
    else:
        await callback_query.answer("–ö–∞—Ä—Ç–æ—á–∫–∞(–∏) —Å —Ç–∞–∫–∏–º —Å–ª–æ–≤–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
